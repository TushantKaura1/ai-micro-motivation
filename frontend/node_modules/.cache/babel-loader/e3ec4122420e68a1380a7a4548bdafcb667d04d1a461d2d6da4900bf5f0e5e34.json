{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';class AuthService{constructor(){this.api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add token to requests if available\nthis.api.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Handle token expiration\nthis.api.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});}async register(userData){try{const response=await this.api.post('/register',userData);return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed');}}async login(credentials){try{const response=await this.api.post('/login',credentials);return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Login failed');}}async getCurrentUser(){try{const token=localStorage.getItem('token');if(!token){throw new Error('No token found');}// Decode token to get user info (in a real app, you'd verify this with the server)\nconst payload=JSON.parse(atob(token.split('.')[1]));return{user_id:payload.user_id,email:payload.email,name:payload.name,streak:payload.streak||0,total_points:payload.total_points||0};}catch(error){throw new Error('Invalid token');}}logout(){localStorage.removeItem('token');}isAuthenticated(){const token=localStorage.getItem('token');if(!token)return false;try{const payload=JSON.parse(atob(token.split('.')[1]));return payload.exp*1000>Date.now();}catch(_unused){return false;}}}export default new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","register","userData","post","data","_error$response2","_error$response2$data","Error","message","login","credentials","_error$response3","_error$response3$data","getCurrentUser","payload","JSON","parse","atob","split","user_id","email","name","streak","total_points","logout","isAuthenticated","exp","Date","now","_unused"],"sources":["/Users/tushant/Desktop/Daily MICRO TASK ASSISTANT/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass AuthService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add token to requests if available\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Handle token expiration\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async register(userData) {\n    try {\n      const response = await this.api.post('/register', userData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  }\n\n  async login(credentials) {\n    try {\n      const response = await this.api.post('/login', credentials);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  }\n\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      // Decode token to get user info (in a real app, you'd verify this with the server)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return {\n        user_id: payload.user_id,\n        email: payload.email,\n        name: payload.name,\n        streak: payload.streak || 0,\n        total_points: payload.total_points || 0,\n      };\n    } catch (error) {\n      throw new Error('Invalid token');\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now();\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}